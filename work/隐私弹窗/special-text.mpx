<template>
  <view class="self-special-text">
    <text wx:for="{{textArr}}" wx:key="index" wx:style="{{item.style}}">{{item.text}}</text>
  </view>
</template>

<script>
  import {createComponent} from '@mpxjs/core'

  const defaultRules = {
    '{x}': {
      style: 'font-weight: 700;'
    },
    '[x]': {
      style: 'font-weight: 700;'
    },
    '#x#': {
      style: 'font-weight: 700;'
    }
  }

  createComponent({
    properties: {
      text: {
        type: String,
        value: ''
      },
      rules: {
        type: Object,
        default: () => {}
      },
      enableDefault: {
        type: Boolean,
        value: true
      }
    },

    computed: {
      textArr () {
        return this.parseStr()
      }
    },

    methods: {
      parseStr () {
        const arr = []
        const str = this.text || ''
        const rules = Object.assign({}, this.enableDefault !== false ? defaultRules : {}, this.rules)
        const separators = Object.keys(rules).sort((a, b) => b.length - a.length)
        str.replace(this.getRegex(separators), (str, $1, ...rest) => {
          const matches = rest.slice(0, separators.length)
          $1 && arr.push({
            text: $1
          })
          for (let i = 0; i < matches.length; i++) {
            if (matches[i]) {
              let rule = rules[separators[i]]
              arr.push({
                style: rule.style || '',
                text: matches[i]
              })
              break
            }
          }
        })
        return arr
      },

      getRegex(separators) {
        let regs = []
        let delimiter = []
        separators.forEach(item => {
          let reg = item.replace(/\w|(\W)/g, (str, $1) => {
            if (str === 'x') {
              return '(.+?)'
            } else if ($1) {
              let escapeStr = `\\${$1}`
              $1 === ']' || $1 === '-' ? delimiter.push(escapeStr) : delimiter.push($1)
              // 特殊字符，尽量转义下
              return escapeStr
            } else {
              delimiter.push(str)
              return str
            }
          })
          regs.push(reg)
        })
        regs.unshift(`([^${delimiter.join('')}]+)`)
        return new RegExp(regs.join('|'), 'g')
      }
    }
  })
</script>

<style lang="stylus">
  .self-special-text
    display: inline
</style>

<script type="application/json">
  {
    "component": true
  }
</script>